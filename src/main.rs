use std::time::{Duration, SystemTime};

mod chip8;
mod input;
mod utils;

static DISPLAY_FPS: u64 = 5;
static DISPLAY_DELAY: Duration = Duration::from_millis(1000 / DISPLAY_FPS);
static TIMER_FPS: u64 = 60;
static TIMER_DELAY: Duration = Duration::from_millis(1000 / TIMER_FPS);

static FONT_DATA: [u8; 5 * 16] = [
	0xf0, 0x90, 0x90, 0x90, 0xf0, // 0
	0x20, 0x60, 0x20, 0x20, 0x70, // 1
	0xf0, 0x10, 0xf0, 0x80, 0xf0, // 2
	0xf0, 0x10, 0xf0, 0x10, 0xf0, // 3
	0x90, 0x90, 0xf0, 0x10, 0x10, // 4
	0xf0, 0x80, 0xf0, 0x10, 0xf0, // 5
	0xf0, 0x80, 0xf0, 0x90, 0xf0, // 6
	0xf0, 0x10, 0x20, 0x40, 0x40, // 7
	0xf0, 0x90, 0xf0, 0x90, 0xf0, // 8
	0xf0, 0x90, 0xf0, 0x10, 0xf0, // 9
	0xf0, 0x90, 0xf0, 0x90, 0x90, // A
	0xe0, 0x90, 0xe0, 0x90, 0xe0, // B
	0xf0, 0x80, 0x80, 0x80, 0xf0, // C
	0xe0, 0x90, 0x90, 0x90, 0xe0, // D
	0xf0, 0x80, 0xf0, 0x80, 0xf0, // E
	0xf0, 0x80, 0xf0, 0x80, 0x80  // F
];

static PROGRAM: [u8; 133] = [ // IBM
	0x00, 0xe0, 0xa2, 0x2a, 0x60, 0x0c, 0x61, 0x08,
	0xd0, 0x1f, 0x70, 0x09, 0xa2, 0x39, 0xd0, 0x1f,
	0xa2, 0x48, 0x70, 0x08, 0xd0, 0x1f, 0x70, 0x04,
	0xa2, 0x57, 0xd0, 0x1f, 0x70, 0x08, 0xa2, 0x66,
	0xd0, 0x1f, 0x70, 0x08, 0xa2, 0x75, 0xd0, 0x1f,
	0x12, 0x28, 0xff, 0x00, 0xff, 0x00, 0x3c, 0x00,
	0x3c, 0x00, 0x3c, 0x00, 0x3c, 0x00, 0xff, 0x00,
	0xff, 0xff, 0x00, 0xff, 0x00, 0x38, 0x00, 0x3f,
	0x00, 0x3f, 0x00, 0x38, 0x00, 0xff, 0x00, 0xff,
	0x80, 0x00, 0xe0, 0x00, 0xe0, 0x00, 0x80, 0x00,
	0x80, 0x00, 0xe0, 0x00, 0xe0, 0x00, 0x80, 0xf8,
	0x00, 0xfc, 0x00, 0x3e, 0x00, 0x3f, 0x00, 0x3b,
	0x00, 0x39, 0x00, 0xf8, 0x00, 0xf8, 0x03, 0x00,
	0x07, 0x00, 0x0f, 0x00, 0xbf, 0x00, 0xfb, 0x00,
	0xf3, 0x00, 0xe3, 0x00, 0x43, 0xe0, 0x00, 0xe0,
	0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80,
	0x00, 0xe0, 0x00, 0xe0, 0x0a,
];


fn main() {
	let mut last_cycle_timestamp: SystemTime = SystemTime::now();

	let mut chip8 = chip8::Chip8::new();
	let mut input = input::Input::new();

	chip8.reset();
	chip8.write_memory_block(0x050, &FONT_DATA);
	chip8.write_memory_block(0x200, &PROGRAM);

	utils::dump_memory_hex(chip8.read_memory_block(0x200, 256), 0x200);

	loop {
		while (last_cycle_timestamp + DISPLAY_DELAY) > SystemTime::now() {
			std::thread::sleep(Duration::from_millis(1));
		}

		chip8.decrement_timers();

		chip8.fetch_decode_execute();

		last_cycle_timestamp = SystemTime::now();
	}
}